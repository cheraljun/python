# 欢迎！这个项目就是您的Python入门指南。我们会一步步走，不急不躁。您可以把这个文件保存下来，慢慢看、慢慢试。
# 先别急着运行代码，我们从基础知识开始聊起。等您看完前面的部分，再来试试后面的代码。

# 1. 简介
# Python是什么？简单说，它就是一个编程语言，像英语一样，让您告诉电脑该做什么。
# 为什么用Python？因为它超级简单易学，不会让您头疼。比如，您可以用它做游戏、处理数据、自动化重复工作，甚至写个小工具帮您整理照片。
# 谁适合学Python？您！就算您是纯小白，也没问题。Python的设计就是为了让新手快速上手。记住：编程不是天才的游戏，是像学骑自行车一样的事，多练就行。
# 这个项目的目标：帮您从0到1，学会Python的基本东西，不用纠结复杂语法。我们会用实际例子来学。

# 2. Python历史
# Python的历史就像一个有趣的故事。它是由一个叫Guido van Rossum的人在1980年代末发明的。他当时在荷兰工作，想做个简单好用的语言。
# 第一版Python在1991年发布。Guido给它取名“Python”，不是因为蛇，而是因为他喜欢一部叫《Monty Python》的搞笑电视节目（就是那种让人笑喷的喜剧）。
# 为什么Python这么流行？因为它不断更新，现在已经是第3版（Python 3.x）了。很多人用它，比如Google、YouTube和Instagram都靠Python运行。
# 小例子：想象Python像一辆自行车，从1991年开始，它越来越先进，但骑起来还是那么简单。

# 3. 安装Python
# 想用Python，您得先把它装到电脑上。别担心，这像下载一个游戏一样容易。
# 步骤：
#   - 去官方网站：打开浏览器，搜索“python.org”，点进去。
#   - 找到“Downloads”下载页面，选择适合您的系统（比如Windows、Mac或Linux）。
#   - 下载最新版本的Python 3.x（别下载Python 2.x，它已经过时了）。
#   - 安装时，记得勾选“Add Python to PATH”（这是个小选项，让您以后更容易运行Python）。
# 装好后，您可以用命令提示符（Windows）或终端（Mac/Linux）来检查：输入“python --version”回车，如果显示版本号如“Python 3.10.x”，就成功了！
# 提示：如果装的过程中出问题，别慌，官网上有教程视频。

# 3.1. Python解释器
# 什么是Python解释器？简单说，它就是Python的“翻译官”。您写的代码是英文（或代码语言），解释器帮您翻译成电脑能懂的语言，然后让电脑执行。
# 为什么需要它？因为电脑只懂二进制代码（0和1），Python解释器让您用简单的话和电脑交流。
# 如何用？装好Python后，解释器就自动装上了。您可以直接在命令提示符里输入“python”来启动它，然后输入代码试试。
# 小例子：解释器就像一个实时翻译机，您说“print('Hello')”，它马上让电脑显示“Hello”。

# 4. 第一个Python程序
# 好了，现在我们来写第一个程序！别紧张，我们从最简单的开始。第一个程序通常是打印“Hello, World!”，这就像编程世界的“您好，世界！”。
# 为什么从这里开始？因为它简单，能让您看到成果，鼓励您继续学。

# 4.1. 使用文本编辑器
# 怎么写代码？您需要一个文本编辑器，就是个写字的工具。别用Word那种，会加奇怪的格式。
# 推荐的编辑器：
#   - Windows：用Notepad（内置的）或下载VS Code（免费，好用）。
#   - Mac：用TextEdit（记得保存为纯文本），或VS Code。
#   - 步骤：
#     1. 打开文本编辑器，创建一个新文件。
#     2. 写代码（我们下面会写）。
#     3. 保存文件，文件名要以“.py”结尾，比如“hello.py”。
#     4. 运行代码：在命令提示符里，导航到文件所在文件夹，输入“python hello.py”回车。
# 现在，我们来写第一个程序的代码例子。别急，我会加注释解释每一步。

# 第一个程序例子1：最简单的“Hello, World!”
print("Hello, World!")  # 这行代码让电脑显示“Hello, World!” on the screen. 
# 解释：print()函数就是个输出工具，它把东西打印到屏幕上。就像您对打印机说“打印这个”，电脑就显示出来了。
# 怎么运行？保存这个代码到hello.py文件，然后在命令提示符里输入“python hello.py”。您会看到屏幕上出现“Hello, World!”。哇哦，恭喜您写出了第一个程序！

# 第二个程序例子：稍微复杂点，打印多行文字
print("Hello, World!")  # 第一行，打印问候
print("This is your first Python program.")  # 第二行，打印额外信息
print("Keep going!")  # 第三行，鼓励您
# 解释：print()可以多次使用，每行都独立。就像您写日记，一行一行加内容。
# 运行它：保存到另一个文件如“hello2.py”，然后运行。屏幕会显示三行文字。

# 4.2. 输入和输出
# 输出我们已经学了，就是用print()显示东西。输入呢？就是让程序问您问题，然后用您的答案做点事。
# 为什么重要？在真实世界，程序需要和人互动，比如问您名字或数字。
# 如何用输入？用input()函数。它像个问答游戏，程序问问题，您输入答案。
# 下面是例子，我会提供多个，让您多练练。

# 输入和输出例子1：基本问答
name = input("What is your name? ")  # 这行让程序问“What is your name? ”，然后等待您输入答案。输入后，按Enter键。
print("Hello, " + name + "!")  # 这行输出问候，用的就是您输入的名字。

# 解释：input()函数获取您输入的东西，并存到变量name里（变量就像个盒子，装东西）。然后print()用这个盒子里的东西。
# 怎么运行？保存到文件如“input1.py”，运行它。程序会停下来等您输入，比如输入“Alice”，它会输出“Hello, Alice!”。

# 输入和输出例子2：计算简单加法
try:
    # 这行代码让程序提示用户输入第一个数字，并将用户输入的内容存储在变量 first_number 中
    first_number = input("Enter the first number: ")
    # 这行代码让程序提示用户输入第二个数字，并将用户输入的内容存储在变量 second_number 中
    second_number = input("Enter the second number: ")
    # 由于 input() 函数返回的是字符串类型，需要使用 int() 函数将输入的字符串转换为整数类型，然后进行加法运算
    # 最后将结果存储在变量 sum_result 中
    sum_result = int(first_number) + int(second_number)
    # 这行代码将计算结果输出到屏幕上
    print("The sum is:", sum_result)
except Exception as e:
    # 如果在 try 块中的代码引发了异常，程序会跳转到这个 except 块中执行
    # 这里使用 Exception 捕获所有类型的异常，并将异常对象赋值给变量 e
    # 然后将错误信息输出到屏幕上，方便用户了解发生了什么错误
    print(f"加法计算出现错误\n{e}")

# 解释：输入的东西默认是文字，所以我们用int()转成数字才能加法。就像您不能加“苹果”和“香蕉”，得先转成数字。
# 怎么运行？保存到“input2.py”，运行。输入两个数字，比如5和3，它会输出7。试试看，如果输错，它可能会报错，别怕，多试就行。

# 输入和输出例子3：更复杂的互动游戏
favorite_color = input("What is your favorite color? ")  # 问您喜欢的颜色。
print("Oh, " + favorite_color + " is a great color!")  # 输出反馈。
try:
    # 这行代码让程序提示用户输入年龄，并将用户输入的内容存储在变量 age 中
    age = input("How old are you? ")
    # 同样，需要使用 int() 函数将输入的字符串转换为整数类型，然后进行加法运算，计算 10 年后的年龄
    # 再使用 str() 函数将结果转换为字符串类型，以便与其他字符串拼接后输出
    print("In 10 years, you will be " + str(int(age) + 10) + " years old.")
except Exception as e:
    # 如果在 try 块中的代码引发了异常，程序会跳转到这个 except 块中执行
    # 这里使用 Exception 捕获所有类型的异常，并将异常对象赋值给变量 e
    # 然后将错误信息输出到屏幕上，方便用户了解发生了什么错误
    print(f"年龄计算出现错误\n{e}")

# 解释：这里我们结合了输入、输出和简单计算。str()函数用来把数字转成文字，好让print()能用。
# 怎么运行？保存到“input3.py”，运行。输入您的颜色和年龄，它会给您反馈。就像和程序聊天！

# 项目结束语
# 恭喜您！您已经完成了这个小项目。从简介到写代码，您现在知道怎么安装Python、运行程序、处理输入和输出。
# 下一步：多复制这些代码到文件里跑一跑，改改数字或文字试试。记住，编程就是练习，错了没关系。

# 欢迎来到这个Python基础学习项目！在这里，我们会一步步带你了解Python的基础内容。
# 别着急，我们慢慢学，就像学走路一样，一步一个脚印。

# 5. Python基础

# 5.1. 数据类型和变量
# 数据类型就像是不同种类的盒子，每个盒子能装不同的东西。
# 变量就像是给盒子贴的标签，方便我们找到里面装的东西。

# 整数类型，就像装整数的盒子
age = 25  # 这里我们创建了一个变量age，它就像一个盒子，里面装着整数25
print("年龄是:", age)  # 打印出age盒子里装的东西

# 浮点数类型，装带有小数点的数字
height = 1.75  # 变量height这个盒子里装着浮点数1.75
print("身高是:", height)

# 布尔类型，只有两个值，True（真）和False（假），就像开关一样
is_student = True  # 变量is_student这个盒子里装着布尔值True
print("是否是学生:", is_student)

# 5.2. 字符串和编码
# 字符串就是一串字符，就像一串珍珠一样。
# 编码就是规定了如何把这些字符存储在计算机里。

# 创建一个字符串变量
name = "张三"  # 变量name这个盒子里装着字符串"张三"
print("名字是:", name)

# 字符串拼接，就像把两串珍珠连在一起
greeting = "你好, " + name + "!"  # 把"你好, "、name盒子里的内容和"!"连在一起
print(greeting)

# 字符串长度，就像数珍珠的个数
length = len(name)  # len()函数可以计算字符串的长度
print("名字的长度是:", length)

# 5.2.1 转义字符
# 转义字符用于表示一些特殊字符，以反斜杠 \ 开头
# 换行符 \n
print("第一行\n第二行")

# 制表符 \t
print("姓名\t年龄")
print("张三\t25")

# 反斜杠本身 \\
print("这是一个反斜杠：\\")

# 双引号 \"
print("她说：\"你好！\"")

# 单引号 \'
print('他说：\'再见！\'')

# 5.2.2 三引号字符串
# 三引号 '''xxx''' 或 """xxx""" 用于创建多行字符串
multiline_string = '''
这是一个多行字符串。
它可以包含多行文本。
不需要使用换行符
来手动换行。
'''
print(multiline_string)

# 三引号字符串也可以用于注释，当它没有赋值给变量时
'''
这是一个用三引号注释的块。
它可以包含多行注释内容。
'''

# 5.3. 使用list和tuple
# list就像一个可以随意增减东西的袋子
# tuple就像一个密封的袋子，一旦做好，里面的东西就不能改变了

# 创建一个list
fruits = ["苹果", "香蕉", "橙子"]  # 变量fruits是一个list，里面装着三种水果
print("水果列表:", fruits)

# 访问list中的元素，就像从袋子里拿出东西
first_fruit = fruits[0]  # 索引从0开始，所以fruits[0]就是列表里的第一个元素
print("第一个水果是:", first_fruit)

# 增加元素到list中，就像往袋子里放东西
fruits.append("葡萄")  # append()方法可以在列表末尾添加一个元素
print("添加葡萄后的水果列表:", fruits)

# 修改list中的元素，就像把袋子里的一个东西换成另一个
fruits[1] = "草莓"  # 把列表里的第二个元素（索引为1）换成"草莓"
print("把香蕉换成草莓后的水果列表:", fruits)

# 删除list中的元素，就像从袋子里拿出一个东西
del fruits[2]  # del语句可以删除列表中指定索引的元素
print("删除橙子后的水果列表:", fruits)

# 创建一个tuple
numbers = (1, 2, 3)  # 变量numbers是一个tuple，里面装着三个数字
print("数字元组:", numbers)

# 访问tuple中的元素，和list一样
second_number = numbers[1]  # 索引从0开始，所以numbers[1]就是元组里的第二个元素
print("第二个数字是:", second_number)

# 注意：tuple一旦创建，就不能修改里面的元素，下面这行代码会报错
# numbers[0] = 4  

# 5.4. 条件判断
# 条件判断就像我们做选择一样，根据不同的情况做出不同的决定。

# 根据年龄判断是否成年
age = 20
if age >= 18:  # 如果年龄大于等于18岁
    print("你已经成年了！")
else:  # 否则
    print("你还未成年。")

# 多个条件判断
score = 85
if score >= 90:
    print("成绩优秀！")
elif score >= 70:  # elif是else if的缩写
    print("成绩良好！")
else:
    print("成绩有待提高。")

'''
# 5.5. 模式匹配
# Python 3.10及以上版本支持模式匹配，就像拼图一样，根据不同的形状找到合适的位置。
# 这里我们简单举个例子，假设我们有一个星期几的代码

weekday_code = 3
match weekday_code:
    case 1:
        print("星期一")
    case 2:
        print("星期二")
    case 3:
        print("星期三")
    case 4:
        print("星期四")
    case 5:
        print("星期五")
    case 6 | 7:  # 6或者7
        print("周末")
    case _:  # 其他情况
        print("无效的代码")
'''

# 5.6. 循环
# 循环就像我们重复做一件事情，直到满足某个条件为止。

# for循环，就像我们一个一个地数东西
fruits = ["苹果", "香蕉", "橙子"]
for fruit in fruits:  # 依次取出列表里的每个元素
    print("我喜欢吃", fruit)

# while循环，就像我们一直做一件事情，直到不满足某个条件为止
count = 0
while count < 5:  # 当count小于5时
    print("当前计数:", count)
    count = count + 1  # 每次循环count加1

# 5.7. 使用dict和set
# dict就像一个字典，每个词（键）都有对应的解释（值）
# set就像一个不允许有重复元素的袋子

# 创建一个dict
person = {"名字": "李四", "年龄": 30, "职业": "工程师"}  # 变量person是一个dict，里面有三个键值对
print("人的信息:", person)

# 访问dict中的元素，就像查字典一样
name = person["名字"]  # 根据键"名字"找到对应的值
print("名字是:", name)

# 增加元素到dict中，就像给字典里添加一个新词和它的解释
person["爱好"] = "打篮球"  # 添加一个新的键值对
print("添加爱好后的人的信息:", person)

# 修改dict中的元素，就像修改字典里一个词的解释
person["年龄"] = 31  # 修改键"年龄"对应的值
print("修改年龄后的人的信息:", person)

# 删除dict中的元素，就像从字典里删掉一个词
del person["职业"]  # 删除键"职业"及其对应的值
print("删除职业后的人的信息:", person)

# 创建一个set
numbers = {1, 2, 3, 2, 4}  # 变量numbers是一个set，注意里面有重复的2，但只会保留一个
print("数字集合:", numbers)

# 增加元素到set中，就像往袋子里放东西
numbers.add(5)  # add()方法可以在集合中添加一个元素
print("添加5后的数字集合:", numbers)

# 删除set中的元素，就像从袋子里拿出一个东西
numbers.remove(3)  # remove()方法可以删除集合中指定的元素
print("删除3后的数字集合:", numbers)

# 结束语
# 恭喜你！你已经完成了这个Python基础学习项目。现在你对Python的基础内容有了一定的了解。
# 接下来，多复制这些代码到文件里跑一跑，改改里面的值试试。记住，编程就是不断练习，错了也没关系。

'''
输出
Hello, World!
Hello, World!
This is your first Python program.
Keep going!
What is your name? 
Hello, !
Enter the first number: 
Enter the second number: 
加法计算出现错误
invalid literal for int() with base 10: ''
What is your favorite color? 
Oh,  is a great color!
How old are you?      
年龄计算出现错误
invalid literal for int() with base 10: ''
年龄是: 25
身高是: 1.75
是否是学生: True
名字是: 张三
你好, 张三!
名字的长度是: 2
第一行
第二行
姓名    年龄
张三    25
这是一个反斜杠：\
她说："你好！"
他说：'再见！'

这是一个多行字符串。
它可以包含多行文本。
不需要使用换行符
来手动换行。

水果列表: ['苹果', '香蕉', '橙子']
第一个水果是: 苹果
添加葡萄后的水果列表: ['苹果', '香蕉', '橙子', '葡萄']
把香蕉换成草莓后的水果列表: ['苹果', '草莓', '橙子', '葡萄']
删除橙子后的水果列表: ['苹果', '草莓', '葡萄']
数字元组: (1, 2, 3)
第二个数字是: 2
你已经成年了！
成绩良好！
我喜欢吃 苹果
我喜欢吃 香蕉
我喜欢吃 橙子
当前计数: 0
当前计数: 1
当前计数: 2
当前计数: 3
当前计数: 4
人的信息: {'名字': '李四', '年龄': 30, '职业': '工程师'}
名字是: 李四
添加爱好后的人的信息: {'名字': '李四', '年龄': 30, '职业': '工程师', '爱好': '打篮球'}
修改年龄后的人的信息: {'名字': '李四', '年龄': 31, '职业': '工程师', '爱好': '打篮球'}
删除职业后的人的信息: {'名字': '李四', '年龄': 31, '爱好': '打篮球'}
数字集合: {1, 2, 3, 4}
添加5后的数字集合: {1, 2, 3, 4, 5}
删除3后的数字集合: {1, 2, 4, 5}
'''