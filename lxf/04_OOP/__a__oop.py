'''
属性是类用于存储数据的成员，方法是类中定义的函数，方法可以使用属性来实现各种操作，
但方法的功能和用途不止于属性的使用，属性也可以在类的外部被访问和操作 。
'''
class Friend(object):
    pass
'''
创建实例是通过类名+()实现的：
'''
f1 = Friend() # 变量f1指向的就是一个Friend的实例
f2 = Friend()
print(f1, f2)
f1.name = 'chenruikang' # 可以自由地给一个实例变量绑定属性，比如，给实例chen绑定一个name属性：
f2.name = 'cheral'
print(f1.name, f2.name)

'''
由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。
通过定义一个特殊的__init__方法，在创建实例的时候，就把属性绑上去：
注意到__init__方法的第一个参数永远是self，表示创建的实例本身，
因此，在__init__方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身。

和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self，并且，调用时，不用传递该参数。
除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。
'''
class Wife(object): # 定义一个名为 Wife 的类，继承自 object（在 Python 3 中，所有类默认继承自 object）
    def __init__(self, name, age, hobby, *args, **kwargs): # __init__ 是类的构造方法，用于在创建实例时初始化实例属性
        self.name = name
        self.age = age
        self.hobby = hobby
        self.args = args
        self.kwargs = kwargs
    '''
    既然类本身就拥有属性，要访问这些属性，就没有必要从外面的函数去访问，
    可以直接在类的内部定义访问数据的函数，这样，就把“属性”给封装起来了。
    这些封装属性的函数是和类本身是关联起来的，我们称之为类的方法。
    要定义一个方法，除了第一个参数是self外，其他和普通函数一样。
    '''
    def printmywife(self): # 方法
        print(f'method: {self.name}, {self.age}, {self.hobby}, {self.args}, {self.kwargs}')
'''
有了__init__方法，在创建实例的时候，就不能传入空的参数了，
必须传入与__init__方法匹配的参数，但self不需要传，Python解释器自己会把实例变量传进去：
'''
w = Wife('cheral', 21, 'English', '我老婆', 胸围 = 'C', 职业 = '数学家', 城市 = '广州')
'''
要调用一个方法，只需要在实例变量上直接调用，除了self不用传递，其他参数正常传入：
'''
w.printmywife()

'''
类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的属性数据都互相独立，互不影响；
方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的属性；
通过在实例上调用方法，我们就直接操作了对象内部的属性，但无需知道方法内部的实现细节。

类与实例的关系：类定义了一种对象的类型，它就像是一个模板，描述了这类对象具有哪些属性和方法。而实例是根据类创建出来的具体对象，每个实例都有自己独立的内存空间，它们所拥有的属性数据相互独立，互不干扰。例如，根据 Wife 类创建出多个妻子实例，每个实例的 name、age、hobby 等属性都可以有不同的值，一个实例属性值的改变不会影响其他实例。
方法与实例的关系：方法是定义在类内部的函数，它与实例绑定。方法的第一个参数通常是 self，代表调用该方法的实例本身。通过 self，方法可以直接访问和操作实例的属性。比如在 Wife 类的 printmywife 方法中，通过 self.name、self.age、self.hobby 来访问实例的属性，这是普通函数所没有的特性，普通函数没有与特定的对象实例关联，也无法直接访问对象的属性。
封装与调用方法的好处：面向对象编程的一个重要特点就是封装，将对象的属性和实现细节隐藏在类的内部，只通过方法来提供对外的接口。通过在实例上调用方法，我们可以直接操作对象内部的属性，而不必了解方法内部的具体实现细节。这样使得代码的结构更加清晰，也提高了代码的可维护性和可扩展性。例如，在修改 printmywife 方法的实现时，只要方法的调用方式不变，外部调用该方法的代码就不需要修改。
'''