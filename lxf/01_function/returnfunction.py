print(abs) # 打印abs函数
def f(x):
    def g():
        return f'f()的参数是{x}'
    return g

'''
这里调用 f(1)，将参数 1 传递给 x。
f 函数返回 g 函数，所以 result 实际上是 g 函数。
此时，g 函数记住了 x 的值为 1，即使 f 函数已经执行完毕。
'''
r = f(1)
print(r) # 打印rfunction函数

'''
调用 r() 实际上就是调用 g()。
由于 g 函数记住了 x 的值为 1，所以它会返回字符串 'f()的参数是1'，并将其打印出来。
闭包就是一个函数（如 g）可以访问并记住其外层函数（如 f）的局部变量（如 x），
即使外层函数已经执行完毕。通过闭包，g 函数能够保留并使用 f 函数调用时传入的参数值。
'''
print(r())